pipeline {
    agent any

    environment {
        IMAGE_NAME = 'aparnajoshi3105/devopsassignment_03'
        IMAGE_TAG = 'latest'
        CONTAINER_NAME = 'Assignment3-container'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
    steps {
        echo 'Starting Build stage...'
        dir('DotnetPipelineApp') {
            sh 'dotnet build --configuration Release'
        }
        echo 'Build stage completed.'
    }
}


        stage('Test') {
    steps {
        echo 'Starting Test stage...'
        dir('DotnetPipelineApp') {
            sh 'dotnet test'
        }
        echo 'Test stage completed.'
    }
}


        stage('Docker Build') {
            steps {
                // Build your Docker image
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    // Login to Docker Hub (or your Docker registry)
                    // Make sure to set your credentials in Jenkins credential store
                    docker.withRegistry('https://index.docker.io/v1/', 'docker_login') {
                        // Push your Docker image
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
       stage('Check and Cleanup Container') {
            steps {
                script {
                    // Check if the container exists
                    def containerExists = sh(script: 'docker ps -a --format "{{.Names}}" | grep -q Assignment3-container', returnStatus: true) == 0
                    // Check if the container is running
                    def containerRunning = sh(script: 'docker ps --format "{{.Names}}" | grep -q Assignment3-container', returnStatus: true) == 0

                    // Stop and remove the container if it exists and is stopped
                    if (containerRunning) {
                        sh 'docker stop Assignment3-container || true'
                        sh 'docker rm Assignment3-container || true'
                        echo 'Stopped and removed existing container.'
                    }
                    // Print a message if the container is already running
                    else if (containerExists) {
                        sh 'docker stop Assignment3-container || true'
                        echo 'Removed successfully.'
                    }
                    // Print a message if the container does not exist
                    else {
                        echo 'Container is not running and does not exists.'
                    }
                }
            }
        }
        stage('Run Container') {
            steps {
                script {
                    // Stop the currently running container (if any)
                    
                    // sh 'docker stop ${IMAGE_NAME}
                    //sh 'docker rm -f ${IMAGE_NAME} || true'
                    // Run the new container
                    //sh "docker run -d --name dotnetappcontainer  -p 8000:80 ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker run -d -p 8081:8080 -p 5000:5000 --name ${CONTAINER_NAME} ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }
}
